{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\n\nconst useInput = validateValue => {\n  _s();\n\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n  const valueIsValid = validateValue;\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = event => {\n    setEnteredValue(event.target.value);\n  };\n\n  const inputBlurHandler = event => {\n    setIsTouched(true);\n  };\n\n  const reset = () => {\n    setEnteredValue(''), setIsTouched(false);\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"qlnmfbTzj9Q0H+uTzI/AGYgwaf8=\");\n\nexport default useInput;","map":{"version":3,"sources":["/home/alind/Downloads/React_forms/src/hooks/use-input.js"],"names":["useState","useInput","validateValue","enteredValue","setEnteredValue","isTouched","setIsTouched","valueIsValid","hasError","valueChangeHandler","event","target","value","inputBlurHandler","reset","isValid"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AACA,MAAMC,QAAQ,GAAIC,aAAD,IAAmB;AAAA;;AAClC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCJ,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AAEA,QAAMO,YAAY,GAAGL,aAArB;AACA,QAAMM,QAAQ,GAAG,CAACD,YAAD,IAAiBF,SAAlC;;AAEA,QAAMI,kBAAkB,GAAIC,KAAD,IAAS;AAClCN,IAAAA,eAAe,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;AACA,GAFF;;AAGA,QAAMC,gBAAgB,GAAIH,KAAD,IAAS;AAChCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFD;;AAIA,QAAMQ,KAAK,GAAG,MAAI;AAChBV,IAAAA,eAAe,CAAC,EAAD,CAAf,EACAE,YAAY,CAAC,KAAD,CADZ;AAGD,GAJD;;AAMA,SAAM;AACJM,IAAAA,KAAK,EAAET,YADH;AAEJY,IAAAA,OAAO,EAAER,YAFL;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,kBAJI;AAKJI,IAAAA,gBALI;AAMJC,IAAAA;AANI,GAAN;AASD,CA7BD;;GAAMb,Q;;AA+BN,eAAeA,QAAf","sourcesContent":["import { useState } from \"react\";\nconst useInput = (validateValue) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [isTouched, setIsTouched] = useState(false);\n\n  const valueIsValid = validateValue;\n  const hasError = !valueIsValid && isTouched;\n\n  const valueChangeHandler = (event)=>{\n    setEnteredValue(event.target.value)\n   }\n  const inputBlurHandler = (event)=>{\n    setIsTouched(true);\n  };\n\n  const reset = ()=>{\n    setEnteredValue(''),\n    setIsTouched(false)\n\n  }\n\n  return{\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  }\n\n};\n\nexport default useInput;\n"]},"metadata":{},"sourceType":"module"}